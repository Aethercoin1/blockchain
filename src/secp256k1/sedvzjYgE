# Makefile.in generated by automake 1.15 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.







am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/libsecp256k1
pkgincludedir = $(includedir)/libsecp256k1
pkglibdir = $(libdir)/libsecp256k1
pkglibexecdir = $(libexecdir)/libsecp256k1
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \
	$(am__EXEEXT_4) $(am__EXEEXT_5)
#am__append_1 = bench_verify bench_sign bench_internal
am__append_2 = tests
TESTS = tests$(EXEEXT)
am__append_3 = -I$(top_srcdir)
am__append_4 = -Wall -Wextra -Wno-unused-function
#am__append_5 = include/secp256k1_ecdh.h
#am__append_6 = src/modules/ecdh/main_impl.h \
#	src/modules/ecdh/tests_impl.h
##am__append_7 = bench_ecdh
#am__append_8 = include/secp256k1_schnorr.h
#am__append_9 =  \
#	src/modules/schnorr/main_impl.h \
#	src/modules/schnorr/schnorr.h \
#	src/modules/schnorr/schnorr_impl.h \
#	src/modules/schnorr/tests_impl.h
##am__append_10 = bench_schnorr_verify
am__append_11 = include/secp256k1_recovery.h
am__append_12 =  \
	src/modules/recovery/main_impl.h \
	src/modules/recovery/tests_impl.h
#am__append_13 = bench_recover
subdir = .
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/build-aux/m4/aethercoin_secp.m4 \
	$(top_srcdir)/build-aux/m4/ax_prog_cc_for_build.m4 \
	$(top_srcdir)/build-aux/m4/libtool.m4 \
	$(top_srcdir)/build-aux/m4/ltoptions.m4 \
	$(top_srcdir)/build-aux/m4/ltsugar.m4 \
	$(top_srcdir)/build-aux/m4/ltversion.m4 \
	$(top_srcdir)/build-aux/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(top_srcdir)/configure \
	$(am__configure_deps) $(am__include_HEADERS_DIST) \
	$(am__noinst_HEADERS_DIST) $(am__DIST_COMMON)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/src/libsecp256k1-config.h
CONFIG_CLEAN_FILES = libsecp256k1.pc
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgconfigdir)" \
	"$(DESTDIR)$(includedir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
am__DEPENDENCIES_1 =
libsecp256k1_la_DEPENDENCIES = $(am__DEPENDENCIES_1)
am__dirstamp = $(am__leading_dot)dirstamp
am_libsecp256k1_la_OBJECTS = src/libsecp256k1_la-secp256k1.lo
libsecp256k1_la_OBJECTS = $(am_libsecp256k1_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
#am__EXEEXT_1 = bench_verify$(EXEEXT) \
#	bench_sign$(EXEEXT) \
#	bench_internal$(EXEEXT)
am__EXEEXT_2 = tests$(EXEEXT)
##am__EXEEXT_3 = bench_ecdh$(EXEEXT)
##am__EXEEXT_4 = bench_schnorr_verify$(EXEEXT)
#am__EXEEXT_5 = bench_recover$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am__bench_ecdh_SOURCES_DIST = src/bench_ecdh.c
##am_bench_ecdh_OBJECTS = src/bench_ecdh.$(OBJEXT)
bench_ecdh_OBJECTS = $(am_bench_ecdh_OBJECTS)
##bench_ecdh_DEPENDENCIES =  \
##	libsecp256k1.la \
##	$(am__DEPENDENCIES_1)
am__bench_internal_SOURCES_DIST = src/bench_internal.c
#am_bench_internal_OBJECTS = src/bench_internal-bench_internal.$(OBJEXT)
bench_internal_OBJECTS = $(am_bench_internal_OBJECTS)
#bench_internal_DEPENDENCIES =  \
#	$(am__DEPENDENCIES_1)
am__bench_recover_SOURCES_DIST = src/bench_recover.c
#am_bench_recover_OBJECTS = src/bench_recover.$(OBJEXT)
bench_recover_OBJECTS = $(am_bench_recover_OBJECTS)
#bench_recover_DEPENDENCIES = libsecp256k1.la \
#	$(am__DEPENDENCIES_1)
am__bench_schnorr_verify_SOURCES_DIST = src/bench_schnorr_verify.c
##am_bench_schnorr_verify_OBJECTS = src/bench_schnorr_verify.$(OBJEXT)
bench_schnorr_verify_OBJECTS = $(am_bench_schnorr_verify_OBJECTS)
##bench_schnorr_verify_DEPENDENCIES = libsecp256k1.la \
##	$(am__DEPENDENCIES_1)
am__bench_sign_SOURCES_DIST = src/bench_sign.c
#am_bench_sign_OBJECTS = src/bench_sign.$(OBJEXT)
bench_sign_OBJECTS = $(am_bench_sign_OBJECTS)
#bench_sign_DEPENDENCIES = libsecp256k1.la \
#	$(am__DEPENDENCIES_1) \
#	$(am__DEPENDENCIES_1)
am__bench_verify_SOURCES_DIST = src/bench_verify.c
#am_bench_verify_OBJECTS =  \
#	src/bench_verify.$(OBJEXT)
bench_verify_OBJECTS = $(am_bench_verify_OBJECTS)
#bench_verify_DEPENDENCIES = libsecp256k1.la \
#	$(am__DEPENDENCIES_1) \
#	$(am__DEPENDENCIES_1)
am__tests_SOURCES_DIST = src/tests.c
am_tests_OBJECTS = src/tests-tests.$(OBJEXT)
tests_OBJECTS = $(am_tests_OBJECTS)
tests_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
tests_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(tests_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
